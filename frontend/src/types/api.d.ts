/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/analytics/dashboard": {
    /** Dashboard analytics */
    get: {
      parameters: {
        query?: {
          timeframe?: "7d" | "30d" | "90d";
          department?: string;
        };
      };
      responses: {
        /** @description Dashboard analytics retrieved */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: components["schemas"]["AnalyticsDashboard"];
            };
          };
        };
      };
    };
  };
  "/api/analytics/requests": {
    /** Request metrics */
    get: {
      parameters: {
        query?: {
          timeframe?: "7d" | "30d" | "90d";
          type?: "leave" | "expense" | "equipment" | "general";
          status?: "pending" | "approved" | "rejected" | "cancelled";
          department?: string;
        };
      };
      responses: {
        /** @description Request metrics retrieved */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: components["schemas"]["AnalyticsRequests"];
            };
          };
        };
      };
    };
  };
  "/api/analytics/workflows": {
    /** Workflow analytics */
    get: {
      parameters: {
        query?: {
          timeframe?: "7d" | "30d" | "90d";
        };
      };
      responses: {
        /** @description Workflow analytics retrieved */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: components["schemas"]["AnalyticsWorkflows"];
            };
          };
        };
      };
    };
  };
  "/api/analytics/users": {
    /** User analytics */
    get: {
      parameters: {
        query?: {
          timeframe?: "7d" | "30d" | "90d";
          department?: string;
          role?: "employee" | "manager" | "admin";
        };
      };
      responses: {
        /** @description User analytics retrieved */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: components["schemas"]["AnalyticsUsers"];
            };
          };
        };
      };
    };
  };
  "/api/analytics/departments": {
    /** Department analytics */
    get: {
      parameters: {
        query?: {
          timeframe?: "7d" | "30d" | "90d";
        };
      };
      responses: {
        /** @description Department analytics retrieved */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: components["schemas"]["AnalyticsDepartments"];
            };
          };
        };
      };
    };
  };
  "/api/auth/login": {
    /**
     * Authenticate user and get tokens
     * @description Login with email and password to receive JWT tokens. Tokens are set as httpOnly cookies and also returned in response.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginRequest"];
        };
      };
      responses: {
        /** @description Login successful */
        200: {
          headers: {
            /** @description HttpOnly cookies with access and refresh tokens */
            "Set-Cookie"?: string;
          };
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: {
                user?: components["schemas"]["User"];
                tokens?: components["schemas"]["AuthTokens"];
              };
            };
          };
        };
        400: components["responses"]["ValidationError"];
        401: components["responses"]["UnauthorizedError"];
        429: components["responses"]["RateLimitError"];
      };
    };
  };
  "/api/auth/me": {
    /**
     * Get current user profile
     * @description Retrieve the authenticated user's profile information
     */
    get: {
      responses: {
        /** @description Profile retrieved successfully */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: {
                user?: components["schemas"]["User"];
              };
            };
          };
        };
        401: components["responses"]["UnauthorizedError"];
      };
    };
  };
  "/health": {
    /**
     * Basic health check
     * @description Quick health status of the application
     */
    get: {
      responses: {
        /** @description Service is healthy */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: components["schemas"]["HealthStatus"];
            };
          };
        };
        /** @description Service is degraded or unhealthy */
        503: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/health/detailed": {
    /**
     * Detailed health and system metrics
     * @description Comprehensive health status including system metrics and service dependencies
     */
    get: {
      responses: {
        /** @description Detailed health information */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: components["schemas"]["HealthStatus"];
            };
          };
        };
        401: components["responses"]["UnauthorizedError"];
      };
    };
  };
  "/health/liveness": {
    /**
     * Kubernetes liveness probe
     * @description Simple liveness check for container orchestration
     */
    get: {
      responses: {
        /** @description Application is alive */
        200: {
          content: {
            "text/plain": string;
          };
        };
      };
    };
  };
  "/health/readiness": {
    /**
     * Kubernetes readiness probe
     * @description Readiness check including database connectivity
     */
    get: {
      responses: {
        /** @description Application is ready to serve traffic */
        200: {
          content: {
            "text/plain": string;
          };
        };
        /** @description Application is not ready */
        503: {
          content: {
            "text/plain": string;
          };
        };
      };
    };
  };
  "/health/backups": {
    /**
     * Backup system health check
     * @description Detailed backup monitoring and status information
     */
    get: {
      responses: {
        /** @description Backup system is healthy */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & ({
              data?: {
                /** @enum {string} */
                overall_status?: "healthy" | "warning" | "critical";
                last_backup_age_hours?: number;
                providers?: Record<string, never>;
                storage?: Record<string, never>;
                alerts?: unknown[];
              };
            });
          };
        };
        /** @description Backup system issues detected */
        503: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/health/metrics": {
    /**
     * Application metrics
     * @description Prometheus-compatible metrics endpoint
     */
    get: {
      responses: {
        /** @description Metrics in Prometheus format */
        200: {
          content: {
            "text/plain": string;
          };
        };
      };
    };
  };
  "/api/users": {
    /** List users */
    get: {
      parameters: {
        query?: {
          role?: "employee" | "manager" | "admin";
          department?: string;
          isActive?: boolean;
          search?: string;
          limit?: number;
          offset?: number;
        };
      };
      responses: {
        /** @description Users retrieved successfully */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: {
                users?: components["schemas"]["User"][];
                pagination?: components["schemas"]["Pagination"];
              };
            };
          };
        };
      };
    };
    /** Create user */
    post: {
      requestBody: {
        content: {
          "application/json": {
            /** Format: email */
            email: string;
            password: string;
            firstName: string;
            lastName: string;
            /**
             * @default employee
             * @enum {string}
             */
            role?: "employee" | "manager" | "admin";
            department?: string;
          };
        };
      };
      responses: {
        /** @description User created successfully */
        201: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/api/users/{id}": {
    /** Get user by ID */
    get: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description User retrieved successfully */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: {
                user?: components["schemas"]["User"];
              };
            };
          };
        };
      };
    };
    /** Update user */
    put: {
      parameters: {
        path: {
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            /** Format: email */
            email?: string;
            firstName?: string;
            lastName?: string;
            /** @enum {string} */
            role?: "employee" | "manager" | "admin";
            department?: string;
            /** Format: uuid */
            managerId?: string;
            isActive?: boolean;
          };
        };
      };
      responses: {
        /** @description User updated successfully */
        200: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/api/users/{id}/deactivate": {
    /** Deactivate user */
    patch: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description User deactivated successfully */
        200: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/api/users/{id}/activate": {
    /** Activate user */
    patch: {
      parameters: {
        path: {
          id: number;
        };
      };
      responses: {
        /** @description User activated successfully */
        200: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/api/users/{id}/requests": {
    /** List requests for a user */
    get: {
      parameters: {
        query?: {
          status?: "pending" | "approved" | "rejected" | "cancelled";
          limit?: number;
          offset?: number;
        };
        path: {
          id: number;
        };
      };
      responses: {
        /** @description User requests retrieved successfully */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: {
                requests?: components["schemas"]["Request"][];
                pagination?: components["schemas"]["Pagination"];
              };
            };
          };
        };
      };
    };
  };
  "/api/workflows": {
    /** List workflows */
    get: {
      parameters: {
        query?: {
          /** @description Filter by active status */
          active?: boolean;
          /** @description Search by name, description, or flowId */
          search?: string;
          limit?: number;
          offset?: number;
        };
      };
      responses: {
        /** @description Workflows retrieved successfully */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: {
                workflows?: components["schemas"]["Workflow"][];
                pagination?: components["schemas"]["Pagination"];
              };
            };
          };
        };
      };
    };
    /** Create workflow */
    post: {
      requestBody: {
        content: {
          "application/json": {
            name: string;
            description?: string;
            /** @enum {string} */
            flowId: "leave" | "expense" | "equipment" | "general";
            /** @default true */
            isActive?: boolean;
            steps: components["schemas"]["WorkflowStep"][];
          };
        };
      };
      responses: {
        /** @description Workflow created successfully */
        201: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: {
                workflow?: components["schemas"]["Workflow"];
              };
            };
          };
        };
      };
    };
  };
  "/api/workflows/{id}": {
    /** Update workflow */
    put: {
      parameters: {
        path: {
          /** @description Workflow ID */
          id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Workflow"];
        };
      };
      responses: {
        /** @description Workflow updated successfully */
        200: {
          content: {
            "application/json": components["schemas"]["SuccessResponse"] & {
              data?: {
                workflow?: components["schemas"]["Workflow"];
              };
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SuccessResponse: {
      /** @example true */
      success?: boolean;
      /** @example Operation successful */
      message?: string;
      data?: Record<string, never>;
      meta?: {
        /** Format: date-time */
        timestamp?: string;
        pagination?: components["schemas"]["Pagination"];
        filters?: Record<string, never>;
      };
    };
    ErrorResponse: {
      /** @example false */
      success?: boolean;
      /** @example An error occurred */
      error?: string;
      /** @example ERROR_CODE */
      code?: string;
      /** @description Optional error details, e.g., validationErrors, stack (dev) */
      details?: {
        [key: string]: unknown;
      };
      meta?: {
        /** Format: date-time */
        timestamp?: string;
      };
    };
    ValidationErrorResponse: {
      /** @example false */
      success?: boolean;
      /** @example Validation failed */
      error?: string;
      /** @example VALIDATION_ERROR */
      code?: string;
      details?: {
        validationErrors?: {
            field?: string;
            message?: string;
            type?: string;
          }[];
      };
      meta?: {
        /** Format: date-time */
        timestamp?: string;
      };
    };
    Pagination: {
      /** @example 1 */
      currentPage?: number;
      /** @example 20 */
      perPage?: number;
      /** @example 100 */
      totalItems?: number;
      /** @example 5 */
      totalPages?: number;
      /** @example true */
      hasNext?: boolean;
      /** @example false */
      hasPrevious?: boolean;
      /** @example 2 */
      nextPage?: number | null;
      /** @example null */
      previousPage?: number | null;
    };
    User: {
      /**
       * Format: uuid
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id?: string;
      /**
       * Format: email
       * @example user@example.com
       */
      email?: string;
      /** @example John */
      firstName?: string;
      /** @example Doe */
      lastName?: string;
      /**
       * @example employee
       * @enum {string}
       */
      role?: "employee" | "manager" | "admin";
      /** @example Engineering */
      department?: string;
      /** Format: uuid */
      managerId?: string | null;
      /** @example true */
      isActive?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      lastLogin?: string | null;
    };
    Request: {
      /** Format: uuid */
      id?: string;
      /** @enum {string} */
      type?: "leave" | "expense" | "equipment" | "general";
      /** @enum {string} */
      status?: "pending" | "approved" | "rejected" | "cancelled";
      /** Format: uuid */
      workflowId?: string;
      /** Format: uuid */
      createdBy?: string;
      currentStepIndex?: number;
      payload?: Record<string, never>;
      steps?: components["schemas"]["WorkflowStep"][];
      /** Format: date-time */
      slaDeadline?: string | null;
      /** Format: date-time */
      completedAt?: string | null;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      creator?: components["schemas"]["User"];
      currentStep?: components["schemas"]["WorkflowStep"];
    };
    WorkflowStep: {
      /** @example 1 */
      stepId?: number;
      /** @enum {string} */
      role?: "employee" | "manager" | "admin";
      /** @example 24 */
      slaHours?: number;
      actions?: ("approve" | "reject" | "escalate")[];
      /** @example true */
      required?: boolean;
      escalationHours?: number | null;
      /** @enum {string|null} */
      escalationRole?: "manager" | "admin" | null;
    };
    Workflow: {
      /** Format: uuid */
      id?: string;
      /** @example Leave Approval Process */
      name?: string;
      /** @example Standard leave request approval workflow */
      description?: string;
      /** @enum {string} */
      flowId?: "leave" | "expense" | "equipment" | "general";
      /** @example true */
      isActive?: boolean;
      steps?: components["schemas"]["WorkflowStep"][];
      /** Format: uuid */
      createdBy?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    RequestHistory: {
      /** Format: uuid */
      id?: string;
      /** Format: uuid */
      requestId?: string;
      /** Format: uuid */
      actorId?: string;
      /** @enum {string} */
      action?: "SUBMIT" | "APPROVE" | "REJECT" | "CANCEL" | "ESCALATE";
      stepId?: number | null;
      comment?: string | null;
      /** Format: date-time */
      createdAt?: string;
      /** Format: email */
      actorEmail?: string;
      /** @enum {string} */
      actorRole?: "employee" | "manager" | "admin";
    };
    /**
     * @example {
     *   "startDate": "2025-09-15",
     *   "endDate": "2025-09-20",
     *   "leaveType": "annual",
     *   "reason": "Family vacation",
     *   "daysRequested": 5
     * }
     */
    LeaveRequestPayload: {
      /** Format: date */
      startDate?: string;
      /** Format: date */
      endDate?: string;
      /** @enum {string} */
      leaveType?: "annual" | "sick" | "personal" | "maternity" | "paternity";
      reason?: string;
      daysRequested?: number;
    };
    /**
     * @example {
     *   "amount": 123.45,
     *   "currency": "USD",
     *   "category": "travel",
     *   "description": "Taxi to airport",
     *   "receiptUrls": [
     *     "https://example.com/receipt/abc123"
     *   ],
     *   "dateIncurred": "2025-09-10"
     * }
     */
    ExpenseRequestPayload: {
      /** @example 150.5 */
      amount?: number;
      /** @example USD */
      currency?: string;
      /** @enum {string} */
      category?: "travel" | "meals" | "officeSupplies" | "software" | "other";
      description?: string;
      receiptUrls?: string[];
      /** Format: date */
      dateIncurred?: string;
    };
    /**
     * @example {
     *   "equipmentType": "laptop",
     *   "specifications": "16GB RAM, 512GB SSD, 14-inch",
     *   "urgency": "high",
     *   "justification": "Developer requires high-spec laptop for builds",
     *   "estimatedCost": 1500
     * }
     */
    EquipmentRequestPayload: {
      /** @enum {string} */
      equipmentType?: "laptop" | "monitor" | "phone" | "accessories" | "other";
      specifications?: string;
      /** @enum {string} */
      urgency?: "low" | "medium" | "high" | "urgent";
      justification?: string;
      estimatedCost?: number | null;
    };
    LoginRequest: {
      /**
       * Format: email
       * @description User's email address
       * @example user@example.com
       */
      email: string;
      /**
       * Format: password
       * @description User's password
       * @example SecurePass123!
       */
      password: string;
    };
    RegisterRequest: {
      /**
       * Format: email
       * @example newuser@example.com
       */
      email: string;
      /**
       * Format: password
       * @example SecurePass123!
       */
      password: string;
      /** @example John */
      first_name: string;
      /** @example Doe */
      last_name: string;
      /**
       * @default employee
       * @enum {string}
       */
      role?: "employee" | "manager" | "admin";
      /** @example Engineering */
      department?: string;
    };
    AuthTokens: {
      /** @description JWT access token */
      access_token?: string;
      /** @description JWT refresh token */
      refresh_token?: string;
      /**
       * @description Token expiration time
       * @example 15m
       */
      expires_in?: string;
    };
    ChangePasswordRequest: {
      /**
       * Format: password
       * @description User's current password
       */
      current_password: string;
      /**
       * Format: password
       * @description New password (min 8 characters)
       */
      new_password: string;
    };
    HealthStatus: {
      /**
       * @description Overall system health status
       * @enum {string}
       */
      status?: "healthy" | "degraded" | "unhealthy";
      /** @description System uptime in seconds */
      uptime?: number;
      /**
       * Format: date-time
       * @description Health check timestamp
       */
      timestamp?: string;
      /** @description Application version */
      version?: string;
      /** @enum {string} */
      environment?: "development" | "test" | "production";
      services?: components["schemas"]["ServiceHealthStatus"];
      system?: components["schemas"]["SystemMetrics"];
    };
    ServiceHealthStatus: {
      database?: components["schemas"]["DatabaseHealth"];
      redis?: components["schemas"]["RedisHealth"];
      externalApis?: components["schemas"]["ExternalServiceHealth"][];
    };
    DatabaseHealth: {
      /** @enum {string} */
      status?: "healthy" | "unhealthy";
      /** @example 15ms */
      responseTime?: string;
      poolStatus?: {
        used?: number;
        free?: number;
        pending?: number;
        max?: number;
        min?: number;
      };
    };
    SystemMetrics: {
      memory?: {
        /** @example 125.5MB */
        used?: string;
        /** @example 512MB */
        total?: string;
        /** @example 24.5 */
        percentage?: number;
      };
      cpu?: {
        /** @example 15.7 */
        usage?: number;
      };
      disk?: {
        /** @example 2.5GB */
        free?: string;
        /** @example 1.2GB */
        used?: string;
      };
    };
  };
  responses: {
    /** @description Authentication required */
    UnauthorizedError: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Access denied */
    ForbiddenError: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Validation failed */
    ValidationError: {
      content: {
        "application/json": components["schemas"]["ValidationErrorResponse"];
      };
    };
    /** @description Resource not found */
    NotFoundError: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Rate limit exceeded */
    RateLimitError: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description Internal server error */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: {
    /** @description Page number for pagination */
    PageParam?: number;
    /** @description Number of items per page */
    LimitParam?: number;
    /** @description Sort field */
    SortParam?: string;
    /** @description Sort order */
    OrderParam?: "asc" | "desc";
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
