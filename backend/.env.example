# =============================================================================
# ProcessPilot Environment Configuration
# =============================================================================
# Copy this file to .env and configure for your environment
# 📖 Full documentation: docs/ENVIRONMENT_VARIABLES.md
# 🔧 Setup guide: docs/DEVELOPMENT_SETUP.md
# ❗ SECURITY: Change all secrets before production deployment

# =============================================================================
# CORE SERVER CONFIGURATION
# =============================================================================

# Application environment (development | test | production)
# Affects: logging level, CORS defaults, security validations
NODE_ENV=development

# Server port number (1000-65535)
# Default: 5000
PORT=5000

# Server bind address
# Development: localhost | Production: 0.0.0.0 (accept all connections)
HOST=localhost

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Database provider selection
# Options: postgresql | supabase | planetscale | neon | railway | generic
# Each provider has different configuration requirements (see below)
DB_PROVIDER=postgresql

# --- POSTGRESQL (Local or Hosted) ---
# Required when DB_PROVIDER=postgresql and no DATABASE_URL
DB_HOST=localhost
DB_PORT=5432
DB_NAME=process_pilot
DB_USER=postgres
DB_PASSWORD=your_password

# Database SSL connection (false for local, true for production)
# 🔒 PRODUCTION: Always enable SSL (DB_SSL=true)
DB_SSL=false

# Connection pool settings
# Development: MIN=2, MAX=10 | Production: MIN=5, MAX=20
DB_POOL_MIN=2
DB_POOL_MAX=10

# --- BAAS PROVIDER CONNECTION ---
# Alternative to individual DB_* settings above
# Use this for Supabase, PlanetScale, Neon, Railway, or generic providers
# Format examples:
#   PostgreSQL: postgresql://user:password@host:port/database
#   Supabase: postgresql://postgres:[password]@db.[ref].supabase.co:5432/postgres
#   PlanetScale: mysql://[user]:[pass]@[host]/[db]?ssl={"rejectUnauthorized":true}
#   Neon: postgresql://[user]:[pass]@[endpoint]/[db]?sslmode=require
#   Railway: postgresql://postgres:[password]@[host]:[port]/railway
# DATABASE_URL=postgresql://user:password@host:port/database

# =============================================================================
# SECURITY & AUTHENTICATION
# =============================================================================

# JWT Access Token Secret - CRITICAL SECURITY
# 🔒 MINIMUM: 32 characters | PRODUCTION: 64+ characters
# ❗ NEVER use default values in production
# Generate: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=your-super-secret-jwt-key-minimum-32-characters-long

# JWT Access Token Expiration
# Format: 15m (15 minutes) | 1h (1 hour) | 7d (7 days)
# Recommended: 15m for security
JWT_EXPIRES_IN=15m

# JWT Refresh Token Secret - MUST BE DIFFERENT FROM JWT_SECRET
# 🔒 Generate separately for security isolation
# Generate: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_REFRESH_SECRET=your-refresh-token-secret-key-minimum-32-characters-long

# JWT Refresh Token Expiration
# Recommended: 7d (7 days) | Max recommended: 30d
JWT_REFRESH_EXPIRES_IN=7d

# Session Secret for CSRF Protection
# 🔒 Used for Double Submit Cookie pattern
# Generate: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
SESSION_SECRET=your-session-secret-key-minimum-32-characters-long

# =============================================================================
# RATE LIMITING & SECURITY
# =============================================================================

# Rate limiting time window in milliseconds
# 900000 = 15 minutes | 300000 = 5 minutes | 1800000 = 30 minutes
RATE_LIMIT_WINDOW_MS=900000

# Maximum requests per time window
# Development: 200 | Production: 100 | High-security: 50
RATE_LIMIT_MAX_REQUESTS=100

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# Allowed origins for CORS (comma-separated for multiple)
# Development: http://localhost:3000
# Production: https://app.yourdomain.com,https://yourdomain.com
# ❗ NEVER use * in production
CORS_ORIGIN=http://localhost:3000

# CORS credentials (required for httpOnly cookies)
CORS_CREDENTIALS=true

# CORS preflight cache time (seconds)
CORS_MAX_AGE=86400

# =============================================================================
# EMAIL/SMTP CONFIGURATION (Optional)
# =============================================================================
# Remove # to enable email functionality
# Required for: request notifications, password resets, alerts

# SMTP server hostname
# Gmail: smtp.gmail.com | Outlook: smtp-mail.outlook.com
# SMTP_HOST=smtp.gmail.com

# SMTP server port
# 587 = TLS (recommended) | 465 = SSL | 25 = unencrypted (not recommended)
# SMTP_PORT=587

# SMTP authentication username (usually your email)
# SMTP_USER=your-email@gmail.com

# SMTP authentication password
# 🔒 Gmail: Use App Password (not regular password) - enable 2FA first
# 📖 Gmail setup: https://support.google.com/accounts/answer/185833
# SMTP_PASS=your-app-password

# Default sender email address
# FROM_EMAIL=noreply@processpilot.com

# =============================================================================
# LOGGING & MONITORING
# =============================================================================

# Logging level (error | warn | info | http | verbose | debug | silly)
# Production: info | Development: debug | Troubleshooting: verbose
LOG_LEVEL=info

# HTTP request logging format (combined | common | dev | short | tiny)
# Production: combined | Development: dev
LOG_FORMAT=combined

# Enable SQL query debugging (true | false)
# ❗ WARNING: NEVER enable in production - exposes sensitive data in logs
DEBUG_SQL=false

# =============================================================================
# FILE UPLOAD & STORAGE
# =============================================================================

# Maximum file upload size in bytes
# 5242880 = 5MB | 10485760 = 10MB | 1048576 = 1MB
MAX_FILE_SIZE=5242880

# File upload directory path
# Relative: ./uploads | Absolute: /var/uploads | Temp: /tmp/uploads
UPLOAD_PATH=./uploads

# =============================================================================
# EXTERNAL INTEGRATIONS (Optional)
# =============================================================================

# Redis connection URL for caching (future feature)
# Local: redis://localhost:6379
# With auth: redis://:password@localhost:6379
# REDIS_URL=redis://localhost:6379

# Slack webhook URL for notifications (optional)
# 🔒 Keep this secret secure
# Get from: Slack App Settings > Incoming Webhooks
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX

# Microsoft Teams webhook URL for notifications (optional)
# 🔒 Keep this secret secure
# TEAMS_WEBHOOK_URL=https://outlook.office.com/webhook/[webhook-id]/[webhook-token]

# =============================================================================
# QUICK SETUP COMMANDS
# =============================================================================
# 1. Copy this file: cp .env.example .env
# 2. Generate secure secrets:
#    node -e "console.log('JWT_SECRET=' + require('crypto').randomBytes(32).toString('hex'))"
#    node -e "console.log('JWT_REFRESH_SECRET=' + require('crypto').randomBytes(32).toString('hex'))"
#    node -e "console.log('SESSION_SECRET=' + require('crypto').randomBytes(32).toString('hex'))"
# 3. Setup database: npm run db:migrate && npm run db:seed
# 4. Start server: npm run dev
# 5. Validate setup: node ../scripts/validate-setup.js
#
# 📖 Full documentation: docs/ENVIRONMENT_VARIABLES.md
# 🆘 Troubleshooting: docs/TROUBLESHOOTING.md